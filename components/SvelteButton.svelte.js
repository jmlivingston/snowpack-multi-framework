import './SvelteButton.svelte.css.proxy.js';
/* components/SvelteButton.svelte generated by Svelte v3.32.2 */
import {
	SvelteComponent,
	append,
	attr,
	detach,
	element,
	init,
	insert,
	listen,
	noop,
	safe_not_equal,
	set_data,
	text
} from "../_snowpack/pkg/svelte/internal.js";

function create_fragment(ctx) {
	let button;
	let t0;
	let t1;
	let t2;
	let t3;
	let t4;
	let mounted;
	let dispose;

	return {
		c() {
			button = element("button");
			t0 = text("Svelte Button (Local: ");
			t1 = text(/*localCounter*/ ctx[2]);
			t2 = text(" / Shared: ");
			t3 = text(/*counter*/ ctx[0]);
			t4 = text(")");
			attr(button, "class", "button svelte-16m8ln1");
		},
		m(target, anchor) {
			insert(target, button, anchor);
			append(button, t0);
			append(button, t1);
			append(button, t2);
			append(button, t3);
			append(button, t4);

			if (!mounted) {
				dispose = listen(button, "click", /*click_handler*/ ctx[3]);
				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (dirty & /*localCounter*/ 4) set_data(t1, /*localCounter*/ ctx[2]);
			if (dirty & /*counter*/ 1) set_data(t3, /*counter*/ ctx[0]);
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(button);
			mounted = false;
			dispose();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { counter } = $$props;
	let { onClick } = $$props;
	let localCounter = 0;

	const click_handler = () => {
		$$invalidate(2, localCounter += 1);
		onClick();
	};

	$$self.$$set = $$props => {
		if ("counter" in $$props) $$invalidate(0, counter = $$props.counter);
		if ("onClick" in $$props) $$invalidate(1, onClick = $$props.onClick);
	};

	return [counter, onClick, localCounter, click_handler];
}

class SvelteButton extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { counter: 0, onClick: 1 });
	}
}

export default SvelteButton;