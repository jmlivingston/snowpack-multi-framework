/* components/app/AppSvelte.svelte generated by Svelte v3.32.2 */
import {
	SvelteComponent,
	create_component,
	destroy_component,
	init,
	mount_component,
	safe_not_equal,
	transition_in,
	transition_out
} from "../../_snowpack/pkg/svelte/internal.js";

import ButtonSvelte from "../core/ButtonSvelte.svelte.js";

function create_fragment(ctx) {
	let buttonsvelte;
	let current;

	buttonsvelte = new ButtonSvelte({
			props: {
				counter: /*counter*/ ctx[0],
				onClick: /*onChange*/ ctx[1]
			}
		});

	return {
		c() {
			create_component(buttonsvelte.$$.fragment);
		},
		m(target, anchor) {
			mount_component(buttonsvelte, target, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			const buttonsvelte_changes = {};
			if (dirty & /*counter*/ 1) buttonsvelte_changes.counter = /*counter*/ ctx[0];
			if (dirty & /*onChange*/ 2) buttonsvelte_changes.onClick = /*onChange*/ ctx[1];
			buttonsvelte.$set(buttonsvelte_changes);
		},
		i(local) {
			if (current) return;
			transition_in(buttonsvelte.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(buttonsvelte.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(buttonsvelte, detaching);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { counter } = $$props;
	let { onChange } = $$props;

	$$self.$$set = $$props => {
		if ("counter" in $$props) $$invalidate(0, counter = $$props.counter);
		if ("onChange" in $$props) $$invalidate(1, onChange = $$props.onChange);
	};

	return [counter, onChange];
}

class AppSvelte extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { counter: 0, onChange: 1 });
	}
}

export default AppSvelte;